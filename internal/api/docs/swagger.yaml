definitions:
  company.CompanyResponse:
    properties:
      company_id:
        type: string
      created_at:
        type: string
      logo:
        type: string
      name:
        type: string
      updated_at:
        type: string
      website:
        type: string
    type: object
  company.ListCompanyUsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/company.UserResponse'
        type: array
    type: object
  company.Message:
    properties:
      message:
        type: string
    type: object
  company.UserResponse:
    properties:
      name:
        type: string
      role:
        type: string
      user_id:
        type: string
    type: object
  debts.Debts:
    properties:
      amount_paid:
        type: number
      client_id:
        type: string
      company_id:
        type: string
      created_at:
        type: string
      currency_code:
        type: string
      id:
        type: string
      is_fully_paid:
        type: boolean
      last_payment_date:
        type: string
      total_amount:
        type: number
    type: object
  debts.DebtsList:
    properties:
      installments:
        items:
          $ref: '#/definitions/debts.Debts'
        type: array
    type: object
  debts.DebtsRequest:
    properties:
      client_id:
        type: string
      company_id:
        type: string
      currency_code:
        type: string
      total_amount:
        type: number
    type: object
  debts.PayDebtsReq:
    properties:
      company_id:
        type: string
      debt_id:
        type: string
      paid_amount:
        type: number
    type: object
  debts.Payment:
    properties:
      created_at:
        type: string
      id:
        type: string
      installment_id:
        type: string
      payment_amount:
        type: number
      payment_date:
        type: string
    type: object
  debts.PaymentList:
    properties:
      payments:
        items:
          $ref: '#/definitions/debts.Payment'
        type: array
    type: object
  entity.Client:
    properties:
      address:
        type: string
      full_name:
        type: string
      phone:
        type: string
      type:
        type: string
    type: object
  entity.CreateCompanyRequest:
    properties:
      logo:
        type: string
      name:
        type: string
      website:
        type: string
    type: object
  entity.CreateUserToCompanyRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      role:
        default: user
        type: string
      username:
        type: string
    type: object
  entity.Error:
    properties:
      message:
        type: string
    type: object
  entity.Purchase:
    properties:
      description:
        type: string
      items:
        items:
          $ref: '#/definitions/entity.PurchaseItem'
        type: array
      payment_method:
        type: string
      supplier_id:
        type: string
    type: object
  entity.PurchaseItem:
    properties:
      product_id:
        type: string
      purchase_price:
        type: number
      quantity:
        type: integer
    type: object
  entity.PurchaseUpdate:
    properties:
      description:
        type: string
      id:
        type: string
      payment_method:
        type: string
      supplier_id:
        type: string
    type: object
  entity.Sale:
    properties:
      client_id:
        type: string
      payment_method:
        type: string
      sold_products:
        items:
          $ref: '#/definitions/entity.SalesItem'
        type: array
    type: object
  entity.SaleUpdate:
    properties:
      client_id:
        type: string
      payment_method:
        type: string
    type: object
  entity.SalesItem:
    properties:
      id:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
      sale_id:
        type: string
      sale_price:
        type: number
      total_price:
        type: number
    type: object
  entity.UpdateCompanyRequest:
    properties:
      logo:
        type: string
      name:
        type: string
      website:
        type: string
    type: object
  entity.UserUpdateRequest:
    properties:
      company_id:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      role:
        type: string
    type: object
  products.CashFlow:
    properties:
      amount:
        type: number
      company_id:
        type: string
      description:
        type: string
      id:
        type: string
      payment_method:
        type: string
      transaction_date:
        type: string
      transaction_type:
        type: string
      user_id:
        type: string
    type: object
  products.CashFlowRequest:
    properties:
      amount:
        type: number
      company_id:
        type: string
      description:
        type: string
      payment_method:
        type: string
      user_id:
        type: string
    type: object
  products.Category:
    properties:
      company_id:
        description: Company ID added
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
    type: object
  products.CategoryList:
    properties:
      categories:
        items:
          $ref: '#/definitions/products.Category'
        type: array
    type: object
  products.DailySales:
    properties:
      day:
        type: string
      product_name:
        type: string
      total_quantity:
        type: integer
    type: object
  products.Error:
    properties:
      error:
        type: string
    type: object
  products.GetTopEntitiesResponse:
    properties:
      entities:
        items:
          $ref: '#/definitions/products.TopEntity'
        type: array
    type: object
  products.ListCashFlow:
    properties:
      cash:
        items:
          $ref: '#/definitions/products.CashFlow'
        type: array
    type: object
  products.Message:
    properties:
      message:
        type: string
    type: object
  products.MostSoldProductsResponse:
    properties:
      daily_sales:
        items:
          $ref: '#/definitions/products.DailySales'
        type: array
    type: object
  products.Price:
    properties:
      many_type:
        type: string
      total_price:
        type: number
    type: object
  products.PriceProducts:
    properties:
      company_id:
        type: string
      sum:
        items:
          $ref: '#/definitions/products.Price'
        type: array
    type: object
  products.Product:
    properties:
      bill_format:
        type: string
      category_id:
        type: string
      company_id:
        description: Company ID added
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      image_url:
        type: string
      incoming_price:
        description: Changed to double
        type: number
      name:
        type: string
      standard_price:
        description: Changed to double
        type: number
      total_count:
        type: integer
    type: object
  products.ProductList:
    properties:
      products:
        items:
          $ref: '#/definitions/products.Product'
        type: array
    type: object
  products.PurchaseItemResponse:
    properties:
      id:
        type: string
      product_id:
        type: string
      product_image:
        type: string
      product_name:
        type: string
      purchase_id:
        type: string
      purchase_price:
        description: Changed to double
        type: number
      quantity:
        type: integer
      total_price:
        description: Changed to double
        type: number
    type: object
  products.PurchaseList:
    properties:
      purchases:
        items:
          $ref: '#/definitions/products.PurchaseResponse'
        type: array
    type: object
  products.PurchaseResponse:
    properties:
      company_id:
        description: Company ID added
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/products.PurchaseItemResponse'
        type: array
      payment_method:
        type: string
      purchased_by:
        type: string
      purchaser_phone_number:
        type: string
      supplier_id:
        type: string
      supplier_name:
        type: string
      total_cost:
        description: Changed to double
        type: number
    type: object
  products.SaleList:
    properties:
      sales:
        items:
          $ref: '#/definitions/products.SaleResponse'
        type: array
    type: object
  products.SaleResponse:
    properties:
      client_id:
        type: string
      client_name:
        type: string
      client_phone_number:
        type: string
      company_id:
        description: Company ID added
        type: string
      created_at:
        type: string
      id:
        type: string
      payment_method:
        type: string
      sold_by:
        type: string
      sold_by_name:
        type: string
      sold_products:
        items:
          $ref: '#/definitions/products.SalesItem'
        type: array
      total_sale_price:
        description: Changed to double
        type: number
    type: object
  products.SalesItem:
    properties:
      id:
        type: string
      product_id:
        type: string
      product_image:
        type: string
      product_name:
        type: string
      quantity:
        type: integer
      sale_id:
        type: string
      sale_price:
        description: Changed to double
        type: number
      total_price:
        description: Changed to double
        type: number
    type: object
  products.TopEntity:
    properties:
      supplier_id:
        type: string
      total_value:
        description: Total value of products purchased
        type: number
    type: object
  user.ClientListResponse:
    properties:
      clients:
        items:
          $ref: '#/definitions/user.ClientResponse'
        type: array
    type: object
  user.ClientRequest:
    properties:
      address:
        type: string
      company_id:
        type: string
      full_name:
        type: string
      phone:
        type: string
      type:
        type: string
    type: object
  user.ClientResponse:
    properties:
      address:
        type: string
      company_id:
        type: string
      full_name:
        type: string
      id:
        type: string
      phone:
        type: string
      type:
        type: string
    type: object
  user.LogInRequest:
    properties:
      password:
        type: string
      phone_number:
        type: string
    type: object
  user.MessageResponse:
    properties:
      message:
        type: string
    type: object
  user.TokenResponse:
    properties:
      access_token:
        type: string
      expire_at:
        type: integer
      refresh_token:
        type: string
      user_id:
        type: string
    type: object
  user.UserListResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/user.UserResponse'
        type: array
    type: object
  user.UserResponse:
    properties:
      company_id:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      role:
        type: string
      user_id:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server
  title: API Gateway
  version: "1.0"
paths:
  /cash-flow:
    get:
      consumes:
      - application/json
      description: Get a list of cash flow transactions for a company based on a given
        date range
      parameters:
      - description: Start Date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End Date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.ListCashFlow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Get cash flow details for a company within a given date range
      tags:
      - Cash Flow
  /cash-flow/expense:
    post:
      consumes:
      - application/json
      description: Create an expense record in the cash flow system
      parameters:
      - description: Expense Cash Flow Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/products.CashFlowRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.CashFlow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Create an expense cash flow transaction for a company
      tags:
      - Cash Flow
  /cash-flow/income:
    post:
      consumes:
      - application/json
      description: Create an income record in the cash flow system
      parameters:
      - description: Income Cash Flow Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/products.CashFlowRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.CashFlow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Create an income cash flow transaction for a company
      tags:
      - Cash Flow
  /clients:
    get:
      consumes:
      - application/json
      description: Retrieve a list of clients with optional filters
      parameters:
      - in: query
        name: address
        type: string
      - in: query
        name: company_id
        type: string
      - in: query
        name: full_name
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      - in: query
        name: phone
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.ClientListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - ApiKeyAuth: []
      summary: List all clients
      tags:
      - Clients
    post:
      consumes:
      - application/json
      description: Create a new client with the provided details
      parameters:
      - description: Client data
        in: body
        name: Client
        required: true
        schema:
          $ref: '#/definitions/user.ClientRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.ClientResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - ApiKeyAuth: []
      summary: Create a new client
      tags:
      - Clients
  /clients/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a client by ID
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete a client
      tags:
      - Clients
    get:
      consumes:
      - application/json
      description: Retrieve a client by ID
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.ClientResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - ApiKeyAuth: []
      summary: Get a client
      tags:
      - Clients
    put:
      consumes:
      - application/json
      description: Update the details of an existing client by ID
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated client data
        in: body
        name: Client
        required: true
        schema:
          $ref: '#/definitions/entity.Client'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.ClientResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - ApiKeyAuth: []
      summary: Update an existing client
      tags:
      - Clients
  /companies:
    get:
      consumes:
      - application/json
      description: Get company details by ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/company.CompanyResponse'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get Company
      tags:
      - companies
    put:
      consumes:
      - application/json
      description: Update company details
      parameters:
      - description: Updated company details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/entity.CreateCompanyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/company.CompanyResponse'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update Company
      tags:
      - companies
  /companies/admin:
    post:
      consumes:
      - application/json
      description: Create a new company
      parameters:
      - description: Company details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/entity.CreateCompanyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/company.CompanyResponse'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create Company
      tags:
      - Admin Companies
  /companies/admin/{company_id}:
    delete:
      consumes:
      - application/json
      description: Delete a company by ID
      parameters:
      - description: Company ID
        in: path
        name: company_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/company.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete Company
      tags:
      - Admin Companies
    get:
      consumes:
      - application/json
      description: Get company details by ID
      parameters:
      - description: Company ID
        in: path
        name: company_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/company.CompanyResponse'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get Company
      tags:
      - Admin Companies
    put:
      consumes:
      - application/json
      description: Update company details admin
      parameters:
      - description: Company ID
        in: path
        name: company_id
        required: true
        type: string
      - description: Updated company details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateCompanyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/company.CompanyResponse'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update Company
      tags:
      - Admin Companies
  /companies/admin/{company_id}/users:
    get:
      consumes:
      - application/json
      description: Get all users for a company
      parameters:
      - description: Company ID
        in: path
        name: company_id
        required: true
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      - description: Page
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/company.ListCompanyUsersResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: ListCompanyUsersA
      tags:
      - Admin Companies
    post:
      consumes:
      - application/json
      description: Create a new user for a company
      parameters:
      - description: Company ID
        in: path
        name: company_id
        required: true
        type: string
      - description: Company user details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/entity.CreateUserToCompanyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/company.Message'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create Company User
      tags:
      - Admin Companies
  /companies/admin/all:
    get:
      consumes:
      - application/json
      description: Get all companies
      parameters:
      - description: Limit
        in: query
        name: limit
        type: string
      - description: Page
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/company.CompanyResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get All Companies
      tags:
      - Admin Companies
  /companies/users:
    get:
      consumes:
      - application/json
      description: Get all users for a company
      parameters:
      - description: Limit
        in: query
        name: limit
        type: string
      - description: Page
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/company.ListCompanyUsersResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: ListCompanyUsers
      tags:
      - companies
    post:
      consumes:
      - application/json
      description: Create a new user for a company
      parameters:
      - description: Company user details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/entity.CreateUserToCompanyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/company.Message'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create Company User
      tags:
      - companies
  /debts:
    get:
      consumes:
      - application/json
      description: Retrieve a list of debts with optional filters
      parameters:
      - in: query
        name: company_id
        type: string
      - in: query
        name: created_after
        type: string
      - in: query
        name: created_before
        type: string
      - in: query
        name: currency_code
        type: string
      - in: query
        name: total_amount_max
        type: number
      - in: query
        name: total_amount_min
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/debts.DebtsList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Get list of debts
      tags:
      - Debts
    post:
      consumes:
      - application/json
      description: Add a new debt for a client with the specified details
      parameters:
      - description: Debt creation details
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/debts.DebtsRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Debt successfully created
          schema:
            $ref: '#/definitions/debts.Debts'
        "400":
          description: Invalid input or bad request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Create a new debt
      tags:
      - Debts
  /debts/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve details of a specific debt by ID
      parameters:
      - description: Debt ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/debts.Debts'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Get a debt by ID
      tags:
      - Debts
  /debts/client/{client_id}:
    get:
      consumes:
      - application/json
      description: Retrieve a list of debts associated with a specific client
      parameters:
      - description: Client ID
        in: path
        name: client_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/debts.DebtsList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Get debts for a client
      tags:
      - Debts
  /debts/pay:
    post:
      consumes:
      - application/json
      description: Make a payment towards a specific debt
      parameters:
      - description: Payment details
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/debts.PayDebtsReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/debts.Debts'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Pay a debt
      tags:
      - Debts
  /debts/payment/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve details of a specific payment by ID
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/debts.Payment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Get a payment by ID
      tags:
      - Debts
  /debts/payments/{debt_id}:
    get:
      consumes:
      - application/json
      description: Retrieve all payments associated with a specific debt
      parameters:
      - description: Debt ID
        in: path
        name: debt_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/debts.PaymentList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Get payments by debt ID
      tags:
      - Debts
  /products:
    get:
      consumes:
      - application/json
      description: Retrieve a list of products with optional filters
      parameters:
      - in: query
        name: category_id
        type: string
      - in: query
        name: created_at
        type: string
      - in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.ProductList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: List all products
      tags:
      - Products
    post:
      consumes:
      - multipart/form-data
      description: Create a new product with the provided details, including an optional
        file upload for the product image
      parameters:
      - description: Upload product image (optional)
        in: formData
        name: file
        type: file
      - description: ID of the product category
        in: formData
        name: category_id
        required: true
        type: string
      - description: Name of the product
        in: formData
        name: name
        required: true
        type: string
      - description: Billing format of the product
        in: formData
        name: bill_format
        required: true
        type: string
      - description: Incoming price of the product
        in: formData
        name: incoming_price
        required: true
        type: number
      - description: Standard price of the product
        in: formData
        name: standard_price
        required: true
        type: number
      produces:
      - application/json
      responses:
        "201":
          description: Product successfully created
          schema:
            $ref: '#/definitions/products.Product'
        "400":
          description: Invalid input or bad request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Create a new product
      tags:
      - Products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete a product
      tags:
      - Products
    get:
      consumes:
      - application/json
      description: Retrieve a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Get a product
      tags:
      - Products
    put:
      consumes:
      - multipart/form-data
      description: Update the details of an existing product by ID, with optional
        media upload
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Upload product image (optional)
        in: formData
        name: file
        type: file
      - description: Name of the product
        in: formData
        name: name
        required: true
        type: string
      - description: Category ID
        in: formData
        name: category_id
        required: true
        type: string
      - description: Billing format
        in: formData
        name: bill_format
        type: string
      - description: Incoming price
        in: formData
        name: incoming_price
        required: true
        type: integer
      - description: Standard price
        in: formData
        name: standard_price
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Update an existing product
      tags:
      - Products
  /products/category:
    get:
      consumes:
      - application/json
      description: Retrieve a list of product categories
      parameters:
      - description: Filter by category name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of categories
          schema:
            $ref: '#/definitions/products.CategoryList'
        "400":
          description: Bad request due to invalid query parameters
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: List Product Categories
      tags:
      - Category
    post:
      consumes:
      - multipart/form-data
      description: Create a new product category by specifying its name and optionally
        uploading an image
      parameters:
      - description: Upload category image (optional)
        in: formData
        name: file
        type: file
      - description: Name of the category
        in: formData
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Category successfully created
          schema:
            $ref: '#/definitions/products.Category'
        "400":
          description: Invalid input or bad request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - ApiKeyAuth: []
      summary: Create Product Category
      tags:
      - Category
  /products/category/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete Product Category
      tags:
      - Category
    get:
      consumes:
      - application/json
      description: Retrieve a product category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Get Product Category
      tags:
      - Category
    put:
      consumes:
      - application/json
      description: Update a product category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Upload category image (optional)
        in: formData
        name: file
        type: file
      - description: Name of the category
        in: formData
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Update Product Category
      tags:
      - Category
  /products/excel-upload/{category_id}:
    post:
      consumes:
      - multipart/form-data
      description: Upload an Excel file containing product data, process it, and create
        products in bulk
      parameters:
      - description: Excel file containing products data
        in: formData
        name: file
        required: true
        type: file
      - description: Sheet name of file
        in: formData
        name: sheet_name
        required: true
        type: string
      - description: Category ID
        in: path
        name: category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Error'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - ApiKeyAuth: []
      summary: Upload an Excel file and create products
      tags:
      - Products
  /products/most-sold:
    get:
      consumes:
      - application/json
      description: Get a list of the most sold products between a given date range
      parameters:
      - description: Start Date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End Date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.MostSoldProductsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Get the most sold products by day
      tags:
      - Statistics
  /products/top-clients:
    get:
      consumes:
      - application/json
      description: Get the top clients for a company based on their purchase value
        in a given date range
      parameters:
      - description: Start Date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End Date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.GetTopEntitiesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Get top clients by value of purchases
      tags:
      - Statistics
  /products/top-suppliers:
    get:
      consumes:
      - application/json
      description: Get the top suppliers for a company based on the value of products
        supplied in a given date range
      parameters:
      - description: Start Date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End Date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.GetTopEntitiesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Get top suppliers by value of products supplied
      tags:
      - Statistics
  /products/total-price:
    get:
      consumes:
      - application/json
      description: Calculate the total price of all products for a specific company
      parameters:
      - description: Start Date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End Date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.PriceProducts'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Calculate the total price of products
      tags:
      - Statistics
  /products/total-purchased:
    get:
      consumes:
      - application/json
      description: Calculate the total purchase amount of products for a specific
        company
      parameters:
      - description: Start Date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End Date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.PriceProducts'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Calculate the total purchase amount of products
      tags:
      - Statistics
  /products/total-sold:
    get:
      consumes:
      - application/json
      description: Calculate the total quantity of sold products for a specific company
      parameters:
      - description: Start Date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End Date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.PriceProducts'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Calculate the total quantity of sold products
      tags:
      - Statistics
  /purchases:
    get:
      consumes:
      - application/json
      description: Retrieve a list of purchases with optional filters
      parameters:
      - in: query
        name: created_at
        type: string
      - in: query
        name: product_id
        type: string
      - in: query
        name: purchased_by
        type: string
      - in: query
        name: supplier_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.PurchaseList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: List all purchases
      tags:
      - Purchases
    post:
      consumes:
      - application/json
      description: Create a new purchase with the provided details
      parameters:
      - description: Purchase data
        in: body
        name: Purchase
        required: true
        schema:
          $ref: '#/definitions/entity.Purchase'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/products.PurchaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Create a new purchase
      tags:
      - Purchases
  /purchases/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a purchase by ID
      parameters:
      - description: Purchase ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete a purchase
      tags:
      - Purchases
    get:
      consumes:
      - application/json
      description: Retrieve a purchase by ID
      parameters:
      - description: Purchase ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.PurchaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Get a purchase
      tags:
      - Purchases
    put:
      consumes:
      - application/json
      description: Update the details of an existing purchase by ID
      parameters:
      - description: Purchase ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated purchase data
        in: body
        name: Purchase
        required: true
        schema:
          $ref: '#/definitions/entity.PurchaseUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.PurchaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Update an existing purchase
      tags:
      - Purchases
  /sales:
    get:
      consumes:
      - application/json
      description: Retrieve a list of sales with optional filters
      parameters:
      - in: query
        name: client_id
        type: string
      - in: query
        name: end_date
        type: string
      - in: query
        name: sold_by
        type: string
      - in: query
        name: start_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.SaleList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: List all sales
      tags:
      - Sales
    post:
      consumes:
      - application/json
      description: Create a new sale with the provided details
      parameters:
      - description: Sale data
        in: body
        name: Sale
        required: true
        schema:
          $ref: '#/definitions/entity.Sale'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/products.SaleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Create a new sale
      tags:
      - Sales
  /sales/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a sale by ID
      parameters:
      - description: Sale ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete a sale
      tags:
      - Sales
    get:
      consumes:
      - application/json
      description: Retrieve a sale by ID
      parameters:
      - description: Sale ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.SaleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Get a sale
      tags:
      - Sales
    put:
      consumes:
      - application/json
      description: Update the details of an existing sale by ID
      parameters:
      - description: Sale ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated sale data
        in: body
        name: Sale
        required: true
        schema:
          $ref: '#/definitions/entity.SaleUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.SaleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Update an existing sale
      tags:
      - Sales
  /sales/calculate:
    post:
      consumes:
      - application/json
      description: Calculate the total sales based on the sale request
      parameters:
      - description: Sale data
        in: body
        name: Sale
        required: true
        schema:
          $ref: '#/definitions/entity.Sale'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/products.SaleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/products.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/products.Error'
      security:
      - ApiKeyAuth: []
      summary: Calculate total sales
      tags:
      - Sales
  /user/admin/register:
    post:
      consumes:
      - application/json
      description: Register a new admin account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Register an Admin
      tags:
      - Admin
  /user/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user account
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Delete User
      tags:
      - User
  /user/get/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Get User
      tags:
      - User
  /user/list:
    get:
      consumes:
      - application/json
      description: Retrieve a list of users with optional filters
      parameters:
      - in: query
        name: first_name
        type: string
      - in: query
        name: last_name
        type: string
      - in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.UserListResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: List Users
      tags:
      - User
  /user/login:
    post:
      consumes:
      - application/json
      description: Admin login
      parameters:
      - description: Admin login
        in: body
        name: Login
        required: true
        schema:
          $ref: '#/definitions/user.LogInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Admin Login
      tags:
      - User
  /user/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Create user
        in: body
        name: CreateUser
        required: true
        schema:
          $ref: '#/definitions/entity.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Create User
      tags:
      - User
  /user/update/{id}:
    put:
      consumes:
      - application/json
      description: Update user details
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update user
        in: body
        name: UpdateUser
        required: true
        schema:
          $ref: '#/definitions/entity.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Update User
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
